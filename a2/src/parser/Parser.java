/* Parser.java */
/* Generated By:JavaCC: Do not edit this line. Parser.java */
  package parser;

  import util.*;
  import java.util.Stack;
  import java.util.Iterator;

  /** A class for performing syntactic analysis
   * */
  public class Parser implements ParserConstants {
      /** Maximum string size allowed */
      public static final int MAX_STRING_SIZE = 5000;
      /** Is debugging enabled? */
      private static boolean debug = false;
      /** Filenames of source files */
      private static String[] filenames = null;
      /** Input streams of source files */
      private static java.io.FileInputStream[] fileReaders = null;
      /** Current file number (index into filenames and fileReaders) */
      private static int fileCnt = 0;

      public Parser(String[] filenames, boolean debug) {
          // set debugging flag
          this.debug = debug;

          // initialize filenames field to parameter filenames
          // used later for finding the name of the current file
          this.filenames = filenames;

          // check that there is at least one specified filename
          if (filenames.length == 0)
              throw new RuntimeException(
                     "Must specify at least one filename to scan");
          // must initialize readers for each file (FileInputStream)
          fileReaders = new java.io.FileInputStream[filenames.length];
          for (int i = 0; i < filenames.length; i++) {
              // try...catch checks if file is found
              try {
                  // create the ith file reader
                  fileReaders[i] = new java.io.FileInputStream(filenames[i]);
              }
              catch(java.io.FileNotFoundException e) {
                  // if file not found then report an error and exit
                  System.err.println("Error: file '" +
                                     filenames[i] + "' not found");
                  System.exit(1);
              }
          }

          if (jj_initialized_once) {
              System.out.println(
              "ERROR: Second call to constructor of static parser.  You must" +
              "       either use ReInit() or set the JavaCC option STATIC to " +
              "false       during parser generation.");
              throw new Error();
          }
          jj_initialized_once = true;

          try { jj_input_stream =
                      new JavaCharStream(fileReaders[0], null, 1, 1); }
          catch(java.io.UnsupportedEncodingException e) {
              throw new RuntimeException(e);
          }

          ReInit(fileReaders[0]);
      }

      /** Parse program
        * @return parsed program as an AST (abstract syntax tree)
        * */
      public boolean parse() {
          // initialize the error handler and class list
          ErrorHandler errorHandler = new ErrorHandler();

          // loop over the files
          for (fileCnt = 0; fileCnt < fileReaders.length; fileCnt++) {
              try {
                  if (fileCnt > 0)
                           jj_input_stream.ReInit(fileReaders[fileCnt], 1, 1);

                  Parser.Program();

                  System.out.println( filenames[fileCnt] +
                                      " is syntactically correct.");

              }
              catch(ParseException e) {

                  String message = e.toString();
                  int index = message.indexOf(": ");
                  message = message.substring(index+2,message.length());
                  errorHandler.register(
                          errorHandler.PARSE_ERROR, filenames[fileCnt],
                          JavaCharStream.getBeginLine(), message);
              }
          }
          errorHandler.checkErrors();

          return true;
      }

      /** Get the filename of the file currently being scanned
        * */
      public static String getCurrFilename() {
          return filenames[fileCnt];
      }

/******************************************/
/* Add your grammar rules below ...       */
/******************************************/

/* 

Precedence (from highest to lowest)
10  new  ()
9   . (dispatch) [] ++ -- (postfix)[left]
8   - (unary) !     ++ -- (prefix) [right]
7   (casting)                      [right]
6   * / %                          [left]
5   + -                            [left]
4   < <= > >= instanceof           [left]
3   == !=                          [left]
2   &&                             [left]
1   ||                             [left]
0   =                              [right]

*/


/* Precedence has yet to be handled */
  static final public void Program() throws ParseException {
    Class();
    jj_consume_token(0);
  }

  static final public void Class() throws ParseException {
    jj_consume_token(CLASS);
    jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case EXTENDS:{
      jj_consume_token(EXTENDS);
      jj_consume_token(ID);
      break;
      }
    default:
      jj_la1[0] = jj_gen;
      ;
    }
    jj_consume_token(LBRACKET);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ID:{
        ;
        break;
        }
      default:
        jj_la1[1] = jj_gen;
        break label_1;
      }
      Member();
    }
    jj_consume_token(RBRACKET);
  }

  static final public void Member() throws ParseException {
    Formal();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LPAREN:{
      Method();
      break;
      }
    case ASSIGN:
    case SEMICOLON:{
      Field();
      break;
      }
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void Method() throws ParseException {
    jj_consume_token(LPAREN);
    Formal();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        ;
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        break label_2;
      }
      jj_consume_token(COMMA);
      Formal();
    }
    jj_consume_token(RPAREN);
    jj_consume_token(LBRACKET);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case WHILE:
      case IF:
      case FOR:
      case NEW:
      case RETURN:
      case LPAREN:
      case LBRACKET:
      case INCREMENT:
      case SUB:
      case DECREMENT:
      case NOT:
      case BREAK:
      case INT_CONST:
      case BOOLEAN_CONST:
      case STRING_CONST:
      case ID:{
        ;
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      Stmt();
    }
    jj_consume_token(RBRACKET);
  }

  static final public void Field() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ASSIGN:{
      jj_consume_token(ASSIGN);
      Expr();
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
  }

  static final public void Formal() throws ParseException {
    jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBRACE:{
      jj_consume_token(LBRACE);
      jj_consume_token(RBRACE);
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    jj_consume_token(ID);
  }

  static final public void Stmt() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NEW:
    case LPAREN:
    case INCREMENT:
    case SUB:
    case DECREMENT:
    case NOT:
    case INT_CONST:
    case BOOLEAN_CONST:
    case STRING_CONST:
    case ID:{
      ExprStmt();
      break;
      }{
      DeclStmt();
      break;
      }
    case IF:{
      IfStmt();
      break;
      }
    case WHILE:{
      WhileStmt();
      break;
      }
    case FOR:{
      ForStmt();
      break;
      }
    case BREAK:{
      BreakStmt();
      break;
      }
    case RETURN:{
      ReturnStmt();
      break;
      }
    case LBRACKET:{
      BlockStmt();
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void ExprStmt() throws ParseException {
    Expr();
  }

  static final public void DeclStmt() throws ParseException {
    Formal();
    jj_consume_token(ASSIGN);
    Expr();
    jj_consume_token(SEMICOLON);
  }

  static final public void IfStmt() throws ParseException {
    jj_consume_token(IF);
    jj_consume_token(LPAREN);
    Expr();
    jj_consume_token(RPAREN);
    Stmt();
    optionalelse();
  }

//(<ELSE>Stmt())?
  static final public void optionalelse() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ELSE:{
      jj_consume_token(ELSE);
      Stmt();
      break;
      }
    default:
      jj_la1[8] = jj_gen;

    }
  }

  static final public void WhileStmt() throws ParseException {
    jj_consume_token(WHILE);
    jj_consume_token(LPAREN);
    Expr();
    jj_consume_token(RPAREN);
    Stmt();
  }

  static final public void ForStmt() throws ParseException {
    jj_consume_token(FOR);
    jj_consume_token(LPAREN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NEW:
    case LPAREN:
    case INCREMENT:
    case SUB:
    case DECREMENT:
    case NOT:
    case INT_CONST:
    case BOOLEAN_CONST:
    case STRING_CONST:
    case ID:{
      Expr();
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NEW:
    case LPAREN:
    case INCREMENT:
    case SUB:
    case DECREMENT:
    case NOT:
    case INT_CONST:
    case BOOLEAN_CONST:
    case STRING_CONST:
    case ID:{
      Expr();
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    jj_consume_token(SEMICOLON);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NEW:
    case LPAREN:
    case INCREMENT:
    case SUB:
    case DECREMENT:
    case NOT:
    case INT_CONST:
    case BOOLEAN_CONST:
    case STRING_CONST:
    case ID:{
      Expr();
      break;
      }
    default:
      jj_la1[11] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    Stmt();
  }

  static final public void BreakStmt() throws ParseException {
    jj_consume_token(BREAK);
    jj_consume_token(SEMICOLON);
  }

  static final public void ReturnStmt() throws ParseException {
    jj_consume_token(RETURN);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NEW:
    case LPAREN:
    case INCREMENT:
    case SUB:
    case DECREMENT:
    case NOT:
    case INT_CONST:
    case BOOLEAN_CONST:
    case STRING_CONST:
    case ID:{
      Expr();
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      ;
    }
  }

  static final public void BlockStmt() throws ParseException {
    jj_consume_token(LBRACKET);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case WHILE:
      case IF:
      case FOR:
      case NEW:
      case RETURN:
      case LPAREN:
      case LBRACKET:
      case INCREMENT:
      case SUB:
      case DECREMENT:
      case NOT:
      case BREAK:
      case INT_CONST:
      case BOOLEAN_CONST:
      case STRING_CONST:
      case ID:{
        ;
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        break label_4;
      }
      Stmt();
    }
    jj_consume_token(RBRACKET);
  }

  static final public void Expr() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NEW:
    case LPAREN:
    case INT_CONST:
    case BOOLEAN_CONST:
    case STRING_CONST:
    case ID:{
      AssignExpr();
      break;
      }{
      DispatchExpr();
      break;
      }{
      NewExpr();
      break;
      }{
      InstanceofExpr();
      break;
      }{
      CastExpr();
      break;
      }{
      BinaryExpr();
      break;
      }
    case INCREMENT:
    case SUB:
    case DECREMENT:
    case NOT:{
      UnaryExpr();
      break;
      }{
      ConstExpr();
      break;
      }{
      VarExpr();
      break;
      }{
      jj_consume_token(LPAREN);
      Expr();
      jj_consume_token(RPAREN);
      break;
      }
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void AssignExpr() throws ParseException {
    VarExpr();
    jj_consume_token(ASSIGN);
    Expr();
  }

  static final public void VarExpr() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:{
      jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRACE:{
        jj_consume_token(LBRACE);
        Expr();
        jj_consume_token(RBRACE);
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        ;
      }
      break;
      }
    case INT_CONST:
    case BOOLEAN_CONST:
    case STRING_CONST:{
      ConstExpr();
      VarExpr1();
      break;
      }
    case LPAREN:{
      CastExpr();
      VarExpr1();
      break;
      }
    case NEW:{
      NewExpr();
      VarExpr1();
      break;
      }
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void VarExpr1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PERIOD:{
      jj_consume_token(PERIOD);
      Expr();
      break;
      }{
      jj_consume_token(PERIOD);
      jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRACE:{
        jj_consume_token(LBRACE);
        Expr();
        jj_consume_token(RBRACE);
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        ;
      }
      break;
      }
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void DispatchExpr() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:{
      jj_consume_token(ID);
      jj_consume_token(LPAREN);
      Expr();
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[19] = jj_gen;
          break label_5;
        }
        jj_consume_token(COMMA);
        Expr();
      }
      jj_consume_token(RPAREN);
      break;
      }
    case INT_CONST:
    case BOOLEAN_CONST:
    case STRING_CONST:{
      ConstExpr();
      DispatchExpr1();
      break;
      }
    case LPAREN:{
      CastExpr();
      DispatchExpr1();
      break;
      }
    case NEW:{
      NewExpr();
      DispatchExpr1();
      break;
      }
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void DispatchExpr1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case PERIOD:{
      jj_consume_token(PERIOD);
      Expr();
      break;
      }{
      jj_consume_token(PERIOD);
      jj_consume_token(ID);
      jj_consume_token(LPAREN);
      Expr();
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case COMMA:{
          ;
          break;
          }
        default:
          jj_la1[21] = jj_gen;
          break label_6;
        }
        jj_consume_token(COMMA);
        Expr();
      }
      jj_consume_token(RPAREN);
      break;
      }
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void NewExpr() throws ParseException {
    jj_consume_token(NEW);
    jj_consume_token(ID);
    NewExpr1();
  }

  static final public void NewExpr1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LPAREN:{
      jj_consume_token(LPAREN);
      jj_consume_token(RPAREN);
      break;
      }
    case LBRACE:{
      jj_consume_token(LBRACE);
      Expr();
      jj_consume_token(RBRACE);
      break;
      }
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void InstanceofExpr() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LPAREN:{
      CastExpr();
      InstanceofExpr1();
      break;
      }
    case INT_CONST:
    case BOOLEAN_CONST:
    case STRING_CONST:{
      ConstExpr();
      InstanceofExpr1();
      break;
      }
    case NEW:{
      NewExpr();
      InstanceofExpr1();
      break;
      }
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void InstanceofExpr1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INSTANCEOF:{
      jj_consume_token(INSTANCEOF);
      jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRACE:{
        jj_consume_token(LBRACE);
        jj_consume_token(RBRACE);
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        ;
      }
      Expr();
      break;
      }{
      jj_consume_token(INSTANCEOF);
      jj_consume_token(ID);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LBRACE:{
        jj_consume_token(LBRACE);
        jj_consume_token(RBRACE);
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        ;
      }
      break;
      }
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void CastExpr() throws ParseException {
    jj_consume_token(LPAREN);
    jj_consume_token(ID);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LBRACE:{
      jj_consume_token(LBRACE);
      jj_consume_token(RBRACE);
      break;
      }
    default:
      jj_la1[28] = jj_gen;
      ;
    }
    jj_consume_token(RPAREN);
    jj_consume_token(LPAREN);
    Expr();
    jj_consume_token(RPAREN);
  }

  static final public void BinaryExpr() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NEW:
    case LPAREN:
    case INT_CONST:
    case BOOLEAN_CONST:
    case STRING_CONST:{
      BinaryArithExpr();
      break;
      }{
      BinaryCompExpr();
      break;
      }{
      BinaryLogicExpr();
      break;
      }
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void UnaryExpr() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NEW:
    case LPAREN:
    case DECREMENT:
    case INT_CONST:
    case BOOLEAN_CONST:
    case STRING_CONST:{
      UnaryDecrExpr();
      break;
      }
    case INCREMENT:{
      UnaryIncrExpr();
      break;
      }
    case SUB:{
      UnaryNegExpr();
      break;
      }
    case NOT:{
      UnaryNotExpr();
      break;
      }
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void ConstExpr() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT_CONST:{
      jj_consume_token(INT_CONST);
      break;
      }
    case BOOLEAN_CONST:{
      jj_consume_token(BOOLEAN_CONST);
      break;
      }
    case STRING_CONST:{
      jj_consume_token(STRING_CONST);
      break;
      }
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void BinaryArithExpr() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NEW:
    case LPAREN:
    case INT_CONST:
    case BOOLEAN_CONST:
    case STRING_CONST:{
      label_7:
      while (true) {
        BinaryArithExpr1();
        jj_consume_token(PLUS);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NEW:
        case LPAREN:
        case INT_CONST:
        case BOOLEAN_CONST:
        case STRING_CONST:{
          ;
          break;
          }
        default:
          jj_la1[32] = jj_gen;
          break label_7;
        }
      }
      Expr();
      break;
      }{
      label_8:
      while (true) {
        BinaryArithExpr1();
        jj_consume_token(SUB);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NEW:
        case LPAREN:
        case INT_CONST:
        case BOOLEAN_CONST:
        case STRING_CONST:{
          ;
          break;
          }
        default:
          jj_la1[33] = jj_gen;
          break label_8;
        }
      }
      Expr();
      break;
      }{
      BinaryArithExpr2();
      break;
      }
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

//Expr()BAE1()Expr()
  static final public void BinaryArithExpr2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NEW:
    case LPAREN:
    case INT_CONST:
    case BOOLEAN_CONST:
    case STRING_CONST:{
      label_9:
      while (true) {
        BinaryArithExpr1();
        jj_consume_token(TIMES);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NEW:
        case LPAREN:
        case INT_CONST:
        case BOOLEAN_CONST:
        case STRING_CONST:{
          ;
          break;
          }
        default:
          jj_la1[35] = jj_gen;
          break label_9;
        }
      }
      Expr();
      break;
      }{
      label_10:
      while (true) {
        BinaryArithExpr1();
        jj_consume_token(DIV);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NEW:
        case LPAREN:
        case INT_CONST:
        case BOOLEAN_CONST:
        case STRING_CONST:{
          ;
          break;
          }
        default:
          jj_la1[36] = jj_gen;
          break label_10;
        }
      }
      Expr();
      break;
      }{
      label_11:
      while (true) {
        BinaryArithExpr1();
        jj_consume_token(MOD);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NEW:
        case LPAREN:
        case INT_CONST:
        case BOOLEAN_CONST:
        case STRING_CONST:{
          ;
          break;
          }
        default:
          jj_la1[37] = jj_gen;
          break label_11;
        }
      }
      Expr();
      break;
      }
    default:
      jj_la1[38] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void BinaryArithExpr1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT_CONST:
    case BOOLEAN_CONST:
    case STRING_CONST:{
      ConstExpr();
      break;
      }
    case LPAREN:{
      CastExpr();
      break;
      }
    case NEW:{
      NewExpr();
      break;
      }
    default:
      jj_la1[39] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void BinaryCompExpr() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NEW:
    case LPAREN:
    case INT_CONST:
    case BOOLEAN_CONST:
    case STRING_CONST:{
      label_12:
      while (true) {
        BinaryCompExpr1();
        jj_consume_token(EQUAL);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NEW:
        case LPAREN:
        case INT_CONST:
        case BOOLEAN_CONST:
        case STRING_CONST:{
          ;
          break;
          }
        default:
          jj_la1[40] = jj_gen;
          break label_12;
        }
      }
      Expr();
      break;
      }{
      label_13:
      while (true) {
        BinaryCompExpr1();
        jj_consume_token(NOT_EQUAL);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NEW:
        case LPAREN:
        case INT_CONST:
        case BOOLEAN_CONST:
        case STRING_CONST:{
          ;
          break;
          }
        default:
          jj_la1[41] = jj_gen;
          break label_13;
        }
      }
      Expr();
      break;
      }{
      BinaryCompExpr2();
      break;
      }
    default:
      jj_la1[42] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void BinaryCompExpr2() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NEW:
    case LPAREN:
    case INT_CONST:
    case BOOLEAN_CONST:
    case STRING_CONST:{
      label_14:
      while (true) {
        BinaryCompExpr1();
        jj_consume_token(LT);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NEW:
        case LPAREN:
        case INT_CONST:
        case BOOLEAN_CONST:
        case STRING_CONST:{
          ;
          break;
          }
        default:
          jj_la1[43] = jj_gen;
          break label_14;
        }
      }
      Expr();
      break;
      }{
      label_15:
      while (true) {
        BinaryCompExpr1();
        jj_consume_token(LTE);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NEW:
        case LPAREN:
        case INT_CONST:
        case BOOLEAN_CONST:
        case STRING_CONST:{
          ;
          break;
          }
        default:
          jj_la1[44] = jj_gen;
          break label_15;
        }
      }
      Expr();
      break;
      }{
      label_16:
      while (true) {
        BinaryCompExpr1();
        jj_consume_token(GT);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NEW:
        case LPAREN:
        case INT_CONST:
        case BOOLEAN_CONST:
        case STRING_CONST:{
          ;
          break;
          }
        default:
          jj_la1[45] = jj_gen;
          break label_16;
        }
      }
      Expr();
      break;
      }{
      label_17:
      while (true) {
        BinaryCompExpr1();
        jj_consume_token(GTE);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NEW:
        case LPAREN:
        case INT_CONST:
        case BOOLEAN_CONST:
        case STRING_CONST:{
          ;
          break;
          }
        default:
          jj_la1[46] = jj_gen;
          break label_17;
        }
      }
      Expr();
      break;
      }
    default:
      jj_la1[47] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void BinaryCompExpr1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT_CONST:
    case BOOLEAN_CONST:
    case STRING_CONST:{
      ConstExpr();
      break;
      }
    case LPAREN:{
      CastExpr();
      break;
      }
    case NEW:{
      NewExpr();
      break;
      }
    default:
      jj_la1[48] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void BinaryLogicExpr() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NEW:
    case LPAREN:
    case INT_CONST:
    case BOOLEAN_CONST:
    case STRING_CONST:{
      label_18:
      while (true) {
        BinaryLogicExpr1();
        jj_consume_token(AND);
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NEW:
        case LPAREN:
        case INT_CONST:
        case BOOLEAN_CONST:
        case STRING_CONST:{
          ;
          break;
          }
        default:
          jj_la1[49] = jj_gen;
          break label_18;
        }
      }
      Expr();
      break;
      }{
      BinaryLogicExpr2();
      break;
      }
    default:
      jj_la1[50] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void BinaryLogicExpr2() throws ParseException {
    label_19:
    while (true) {
      BinaryLogicExpr1();
      jj_consume_token(OR);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NEW:
      case LPAREN:
      case INT_CONST:
      case BOOLEAN_CONST:
      case STRING_CONST:{
        ;
        break;
        }
      default:
        jj_la1[51] = jj_gen;
        break label_19;
      }
    }
    Expr();
  }

  static final public void BinaryLogicExpr1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INT_CONST:
    case BOOLEAN_CONST:
    case STRING_CONST:{
      ConstExpr();
      break;
      }
    case LPAREN:{
      CastExpr();
      break;
      }
    case NEW:{
      NewExpr();
      break;
      }
    default:
      jj_la1[52] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void UnaryNegExpr() throws ParseException {
    jj_consume_token(SUB);
    Expr();
  }

  static final public void UnaryNotExpr() throws ParseException {
    jj_consume_token(NOT);
    Expr();
  }

  static final public void UnaryIncrExpr() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case INCREMENT:{
      jj_consume_token(INCREMENT);
      Expr();
      break;
      }
    case NEW:
    case LPAREN:
    case INT_CONST:
    case BOOLEAN_CONST:
    case STRING_CONST:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT_CONST:
      case BOOLEAN_CONST:
      case STRING_CONST:{
        ConstExpr();
        break;
        }
      case LPAREN:{
        CastExpr();
        break;
        }
      case NEW:{
        NewExpr();
        break;
        }
      default:
        jj_la1[53] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(INCREMENT);
      break;
      }
    default:
      jj_la1[54] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void UnaryDecrExpr() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case DECREMENT:{
      jj_consume_token(DECREMENT);
      Expr();
      break;
      }
    case NEW:
    case LPAREN:
    case INT_CONST:
    case BOOLEAN_CONST:
    case STRING_CONST:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT_CONST:
      case BOOLEAN_CONST:
      case STRING_CONST:{
        ConstExpr();
        break;
        }
      case LPAREN:{
        CastExpr();
        break;
        }
      case NEW:{
        NewExpr();
        break;
        }
      default:
        jj_la1[55] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(DECREMENT);
      break;
      }
    default:
      jj_la1[56] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static JavaCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[57];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x4,0x0,0x82000,0x0,0x20e0a1d8,0x80000,0x20000,0x20e0a1d8,0x20,0x20e02080,0x20e02080,0x20e02080,0x20e02080,0x20e0a1d8,0x20e02080,0x20000,0x2080,0x20000,0x0,0x0,0x2080,0x0,0x0,0x22000,0x2080,0x20000,0x20000,0x0,0x20000,0x2080,0x20e02080,0x0,0x2080,0x2080,0x2080,0x2080,0x2080,0x2080,0x2080,0x2080,0x2080,0x2080,0x2080,0x2080,0x2080,0x2080,0x2080,0x2080,0x2080,0x2080,0x2080,0x2080,0x2080,0x2080,0x202080,0x2080,0x802080,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x1000,0x1,0x4,0x1e40,0x0,0x0,0x1e40,0x0,0x1e00,0x1e00,0x1e00,0x1e00,0x1e40,0x1e00,0x0,0x1e00,0x0,0x2,0x4,0x1e00,0x4,0x2,0x0,0xe00,0x0,0x0,0x80,0x0,0xe00,0xe00,0xe00,0xe00,0xe00,0xe00,0xe00,0xe00,0xe00,0xe00,0xe00,0xe00,0xe00,0xe00,0xe00,0xe00,0xe00,0xe00,0xe00,0xe00,0xe00,0xe00,0xe00,0xe00,0xe00,0xe00,0xe00,0xe00,};
   }

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new JavaCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 57; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 57; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new JavaCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 57; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 57; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 57; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 57; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[48];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 57; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 48; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  }
